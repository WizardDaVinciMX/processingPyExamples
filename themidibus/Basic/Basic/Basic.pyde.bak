"""
Traducci√≥n del sketch Basic de la bibliteca TheMidiBus
(c) 2025, wannabes
"""
add_library('themidibus') #Import the library

def setup():
  global myBus

  size(400, 400)
  background(0)

  MidiBus.list() # List all available Midi devices on STDOUT. This will show each device's index and name.

  # Either you c0an
  #             Parent In Out
  #                |    |  |
#  myBus = MidiBus(this, 0, 0) # Create a new MidiBus using the device index to select the Midi input and output devices respectively.

  # or you can ...
  #              Parent         In                   Out
  #                 |            |                     |
  myBus = MidiBus(this, "Real Time Sequencer", "Real Time Sequencer") # Create a new MidiBus using the device names to select the Midi input and output devices respectively.

  # or for testing you could ...
  #                 Parent  In        Out
  #                   |     |          |
#  myBus = MidiBus(this, -1, "Java Sound Synthesizer") # Create a new MidiBus with no input device and the default Java Sound Synthesizer as the output device.


def draw():
  channel = 0
  pitch = 64
  velocity = 127

  myBus.sendNoteOn(channel, pitch, velocity) # Send a Midi noteOn
  delay(200)
  myBus.sendNoteOff(channel, pitch, velocity) # Send a Midi nodeOff

  number = 0
  value = 90

  myBus.sendControllerChange(channel, number, value) # Send a controllerChange
  delay(2000)

def noteOn(channel, pitch, velocity):
  # Receive a noteOn
  println()
  println("Note On:")
  println("--------")
  println("Channel:"+channel)
  println("Pitch:"+pitch)
  println("Velocity:"+velocity)

def noteOff(channel, pitch, velocity):
  # Receive a noteOff
  println()
  println("Note Off:")
  println("--------")
  println("Channel:"+channel)
  println("Pitch:"+pitch)
  println("Velocity:"+velocity)

def controllerChange(channel, number, value):
  # Receive a controllerChange
  println()
  println("Controller Change:")
  println("--------")
  println("Channel:"+channel)
  println("Number:"+number)
  println("Value:"+value)


def delay(time) :
  current = millis()
#  while (millis() < current+time):
#    Thread.yield()
